$breakpoints: ( xs: 576px, sm: 768px, md: 850px, lg: 1200px );

@mixin transform($transform...) {
	-webkit-transform: $transform;
	-moz-transform: $transform;
	-ms-transform: $transform;
	-o-transform: $transform;
	transform: $transform;
}
@mixin respond-above($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }

  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

@mixin respond-below($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }

  // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

@mixin respond-between($lower, $upper) {

  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }

  // If one or both of the breakpoints don't exist.
  } @else {

    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {

      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {

      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

@import url('https://fonts.googleapis.com/css?family=Oxygen:300,400,500,600,700');

$font: -apple-system, system-ui,  Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, sans-serif, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';

$primary: #6551CC;
$secondary: #1f2227;

html{
  font-family: $font;
  -webkit-font-smoothing: antialiased;
  color: $secondary;
  font-size: 112.5%;
  @include respond-above(sm){
    font-size: 137.5%;
  };
}

body{
  &.dark-mode{
    background: black;
    * {
      color: white;
    }
  }
}
.lead{
  // font-size: 1.3rem;
  // line-height: 1.5;
  // @include respond-above(md){
    line-height: 1.3;
    font-size: 1.6rem;
  // };
}
a{
  color: $secondary;
  display: inline-block;
  position: relative;
  text-decoration: none;
  &:after{
    width: 100%;
    height: 10px;
    background: linear-gradient(to right, #1fa2ff, #12d8fa, #a6ffcb);
    content: "";
    position: absolute;
    bottom: 2px;
    right: 0;
    opacity: .5;
    transition: .3s ease-in-out;
    z-index: -1;
  }
  &:hover, &:focus{
    &:after{
      opacity: .6;
      height: 60%;
    }
  }
}
h1{
  margin-top: 3rem;
  font-size: 3.5rem;
  @include respond-above(sm){
    font-size: 3.5rem;
    line-height: 1.2;
  };
	@media print {
		margin-top: 0;
	  font-size: 3rem;
	}
}
h2{
  font-size: 2rem;
  margin-top: 2.5rem;
  @include respond-above(sm){
    font-size: 3rem;
    line-height: 4rem;
  };
	@media print {
		margin-top: 1rem;
		font-size: 2rem;
		line-height: 2rem;
	}

}
h3{
  margin-top: 2.5rem;
  @include respond-above(sm){
  };
	@media print {
		margin-top: 1rem;
		margin-bottom: .5rem;
	}
}
.indent{
	margin-left: 2rem;
	@media print {
		margin-left: 0;
	}

}
.entry{
	@media print {
		margin-bottom: 2rem;
	}
	p{
		@media print {
			margin-bottom: 0;
			line-height: 1.5rem;
		}
	}
}
footer{
  margin-top: 2rem;
	@media print {
		display: none;
	}
}
.home-link{
	@media print {
		display: none;
	}
}
.social-link{
  margin-right: .5rem;
  +.social-link {
    margin: 0 .5rem;
  }
}
.sr-only {
  border: 0;
  clip: rect(0,0,0,0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

.title_attr{
	font-weight: bold;
}
.mb-0{
	margin-bottom: 0;
}
.mt-1{
	margin-top: 1rem;
}
@use postcss-nested;

:root {
  --bg-planet-bright: #F2C94C;
  --bg-planet-shadow: #828894;
  --bg-planet-lightshadow: #D7D7D820;
  --dot-size: 0.25rem;
  --bg-color: #2C3144;
}

* {
    box-sizing: inherit;
    &:before,
    &:after {
        box-sizing: inherit;
    }
}

html {
  box-sizing: border-box;
  -webkit-font-smoothing: antialiased;

  body {
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: background-color 400ms ease;
    
    label.label-toggle {
      cursor: pointer;
      padding: 1rem;
      position: fixed;
      top: 0;
      right: 0;
      transform: scale(.6);

      /* To make outline on mobile invisible */
      -webkit-tap-highlight-color:  rgba(255, 255, 255, 0); 
      
      input[type="checkbox"] {
          height: 0;
          width: 0;
          visibility: hidden;
          position: absolute;
      }
      
      .planet {
        width: 2rem;
        height: 2rem;
        border-radius: 50%;
        overflow: hidden;
        background:
          radial-gradient(3.75em, 99%, transparent 100%);
        background-color: var(--bg-planet-bright);
        background-repeat: no-repeat;
        position: relative;
        will-change: background;
        transition: all 400ms ease;

        /* Safari transition issue */
        backface-visibility: hidden;
        transform: translate3d(0, 0, 0);
        
        &::after {
          content: "";
          background-color: var(--bg-planet-shadow);
          width: 2rem;
          height: 2rem;
          position: absolute;
          border-radius: 50%;
          will-change: opacity, transform, background-color;
          opacity: 0;
          transform: translate(2em, -2em);
          transition: opacity 400ms ease, transform 400ms ease, background-color 400ms ease;
        }
      }

      .elements {
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        transition: transform 400ms ease;

        svg {
          position: absolute;
          width: 10px;
          height: 10px;
          opacity: 1;
          transition: transform 400ms ease, opacity 200ms ease, width 200ms ease, height 200ms ease;
          circle {
            fill: var(--bg-planet-bright);
            transition: fill 400ms ease;
          }
          &:first-child {
            transform: translate(1.8em, 0.35em);
          }
          &:nth-child(2) {
            transform: translate(2.8em, 0.7em);
          }
          &:nth-child(3) {
            transform: translate(3.2em, 1.8em);
          }
          &:nth-child(4) {
            transform: translate(2.8em, 2.8em);
          }
          &:nth-child(5) {
            transform: translate(1.8em, 3.2em);
          }
          &:nth-child(6) {
            transform: translate(0.7em, 2.8em);
          }
          &:nth-child(7) {
            transform: translate(0.35em, 1.8em);
          }
          &:nth-child(8) {
            transform: translate(0.7em, 0.7em);
          }
        }
      }
    }
  }

    
  body {
    &.dark {
      background-color: var(--bg-color);
      * {
        color: white;
      }
    }
  }
      
  label.label-toggle {

    input:checked {
      &+.planet {
        --bg-planet-bright: #D7D7D8;

        &::after {
          opacity: 1;
          transform: translate(0.6em, -0.5em);
        }
      }

      &~.elements {
        transform: rotate(180deg);

        svg {
          &:first-child {
            transform: translate(2em, 1em);
            opacity: 0;
          }
          &:nth-child(2) {
            transform: translate(3em, 1.5em);
            opacity: 0;
          }
          &:nth-child(3) {
            transform: translate(3em, 2em);
            opacity: 0;
          }
          &:nth-child(4) {
            transform: translate(3em, 2em);
            opacity: 0;
          }
          &:nth-child(5) {
            transform: translate(1.9em, 2.6em);
            width: 0.3em;
            height: 0.3em;
            circle {
              fill: var(--bg-planet-lightshadow);
            }
          }
          &:nth-child(6) {
            transform: translate(1.4em, 2.5em);
            width: 0.3em;
            height: 0.3em;
            circle {
              fill: var(--bg-planet-lightshadow);
            }
          }
          &:nth-child(7) {
            transform: translate(1.1em, 1.6em);
            width: 0.7em;
            height: 0.7em;
            circle {
              fill: var(--bg-planet-lightshadow);
            }
          }
          &:nth-child(8) {
            width: 0.45em;
            height: 0.45em;
            transform: translate(1.7em, 2.1em);
            circle {
              fill: var(--bg-planet-lightshadow);
            }
          }
        }
      }
    }
  }
}